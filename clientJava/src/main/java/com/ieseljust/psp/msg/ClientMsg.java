/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ieseljust.psp.msg;

import org.json.JSONObject;
import org.json.JSONArray;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import java.awt.event.*;

import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.BufferedReader;
import java.io.PrintWriter;

/**
 * Client en java per a conectar-se al server
 * @author Artur Badenes Puig
 */
public class ClientMsg extends javax.swing.JFrame {
    private String userName;
    private int serverPort;
    private String serverIP;
    private int lastMsg;

    /**
     * Registra el client/usuari al servidor.
     * @param args un missatge JSON amb el format: {"command": "register", "user": NomUsuariActual}
     */
    public ClientMsg(String[] args) {
        // Valors per defecte
        this.userName = "anonim";
        this.serverIP = "127.0.0.1";
        this.serverPort = 9999;
        this.lastMsg = 0; // WIP: Obtindre'l a través d'una nova connexio

        // Si ens passen arguments:
        if (args.length >= 1) this.userName = args[0];
        if (args.length >= 2) this.serverIP = args[1];
        if (args.length == 3) this.serverPort = Integer.parseInt(args[2]);

        JSONObject msg = new JSONObject();
        msg.put("user", this.userName);
        msg.put("command", "register");

        sendServer(msg.toString());

        initComponents();
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        // TextAreaMissatges = new javax.swing.JTextArea();
        TextAreaMissatges = new javax.swing.JEditorPane("text/html", "");
        kitHtmlWriter = new javax.swing.text.html.HTMLEditorKit();
        TextAreaMissatges.setEditorKit(kitHtmlWriter);

        jScrollPane2 = new javax.swing.JScrollPane();
        LlistaUsuaris = new javax.swing.JList<>();
        TextFieldMissatge = new javax.swing.JTextField();
        BTEnviar = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Missatges");
        setName("Missatges"); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 480));

        TextAreaMissatges.setEditable(false);
        doc = new HTMLDocument();
        TextAreaMissatges.setDocument(doc);
        // TextAreaMissatges.setText("<html><b>Benvingut...</b></html>");
        jScrollPane1.setViewportView(TextAreaMissatges);

        jScrollPane2.setViewportView(LlistaUsuaris);

        TextFieldMissatge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldMissatgeActionPerformed(evt);
            }
        });

        BTEnviar.setText("Enviar");
        BTEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(TextFieldMissatge, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(BTEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(TextFieldMissatge).addGroup(layout.createSequentialGroup()
                                        .addComponent(BTEnviar).addGap(0, 27, Short.MAX_VALUE)))
                        .addContainerGap()));

        pack();


        // Detectem quan es tanca la finestra per "desregistrar l'usuari"
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                JSONObject peticio = new JSONObject();
                peticio.put("command", "unregister");
                peticio.put("user", userName);
                sendServer(peticio.toString());

                e.getWindow().dispose();
            }
        });

    }// </editor-fold>

    private void TextFieldMissatgeActionPerformed(java.awt.event.ActionEvent evt) {
        enviaMissatge();
    }

    private void BTEnviarActionPerformed(java.awt.event.ActionEvent evt) {
        enviaMissatge();

    }

    /**
     * Aquest mètode rep un string (msg) que conté text en format JSON,
     * i l'envia al servidor a través d'un socket.
     * @param msg missatge a enviar
     * @return
     */
    private JSONObject sendServer(String msg) {
        /*
        Per a això, ens haurem de connectar al servidor, obtenir els
        fluxos d'entrada i eixida del socket corresponent a la connexió, i
        envia a través d'ell l'string. Quan rebem resposta la tornarem
        com a un objecte JSON.
        */
        String respostaServer = "";
        Socket socket = new Socket();
        InetSocketAddress socketAddress = new InetSocketAddress(serverIP, serverPort);
        System.out.println(socketAddress.toString());
        try {
            socket.connect(socketAddress);

            // Obtenció dels streams d'entrada i eixida
            InputStream is = socket.getInputStream();
            OutputStream os = socket.getOutputStream();

            // Creem fluxos per a la lectura i escriptura de caràcters
            InputStreamReader isr = new InputStreamReader(is);
            OutputStreamWriter osw = new OutputStreamWriter(os);

            // Creem fluxos per a la lectura i escriptura de línies
            BufferedReader bReader = new BufferedReader(isr);
            PrintWriter pWriter = new PrintWriter(osw);

            pWriter.println(msg);
            pWriter.flush();

            respostaServer = bReader.readLine();

        } catch (IOException e) {
            System.out.println("[ClientMsg] Excepció en la connexió: " + e.getMessage());
        }

        JSONObject missatge = new JSONObject(respostaServer);
        //System.out.println("[artur] missatge: " + missatge);
        return missatge;
    }

    /**
     * Envia un  missatge al servidor amb format {"command": "getUserList"}
     * i s'actualitza las llista de usuaris local i a la gui.
     */
    public void ActualitzaLlistaUsuaris() {
        /*
        Aquest mètode s'invoca periòdicament a través d'un event.
        Quan s'invoque, haurem d'enviar al servidor un missatge amb el format:

        {"command": "getUserList"}

        el servidor ens respondrà amb la llista d'usuaris en un objecte JSON.

        Per tal d'actualutzar la llista d'usuaris a la GUI, invocarem el mètode
        ActualitzaLlistaUsuarisGUI(JSONObject usuarisJSON) (ja implementat).
        */
        JSONObject usuarisJSON = new JSONObject();
        usuarisJSON.put("command", "getUserList");
        JSONObject resposta = sendServer(usuarisJSON.toString());

        ActualitzaLlistaUsuarisGUI(resposta);
    }

    /**
     * Rep el JSON amb la llista d'usuaris i la bolca a la GUI.
     * @param usuarisJSON
     */
    public void ActualitzaLlistaUsuarisGUI(JSONObject usuarisJSON) {
        // Agafem la llista d'usuaris de la resposta usuarisJSON
        List<Object> usuaris = usuarisJSON.getJSONArray("UserList").toList();

        DefaultListModel<String> lm = new DefaultListModel<String>();

        // Afegim els usuaris a la llista
        for (Object usuari : usuaris) {
            lm.addElement(usuari.toString());
        }
        // Actualitzem la UI
        LlistaUsuaris.setModel(lm);
    }

    /**
     * Aquest mètode actualitza la llista de missatges des del servidor
     * amb una petició amb format:
     * {"command":"getMsgs", "lastMsg":ultimMissatge}
     * y una resposta amb format:
     * { "missatges": [
         *  {"username":"Usuari_1", "text":"Text del missatge 1"},
         *  {"username":"Usuari_2", "text":"Text del missatge 2"}]
     *   "lastMsg": numUltimMissatge }
     */
    public void ActualitzaMissatges() {
        JSONObject msg = new JSONObject();
        msg.put("command", "getMsgs");
        msg.put("lastMsg", lastMsg);
        JSONObject resposta = sendServer(msg.toString());

        // actualitzar ultim missatge
        this.lastMsg = resposta.getInt("lastMsg");
        JSONArray missatges = resposta.getJSONArray("missatges");
        // Actualitzar la vista
        ActualitzaMissatgesGUI(missatges);
    }

    /**
     * Bolquem la llista de misstges llistaMsg sobre la GUI
     * @param llistaMsg
     */
    public void ActualitzaMissatgesGUI(JSONArray llistaMsg) {

        for (int i = 0; i < llistaMsg.length(); i++) {
            JSONObject msgActual = llistaMsg.getJSONObject(i);

            String linia = "<b>" + msgActual.getString("userName") + ": </b>";
            linia += msgActual.getString("text") + "\n";

            try {
                kitHtmlWriter.insertHTML(doc, doc.getLength(), linia, 0, 0, null);
                //System.out.println("DOC:" + doc.toString());
            } catch (BadLocationException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Aquest mètode s'invoca quan fem clic en el botó enviar o bé quan prenem la tecla
     * Intro en el quadre del missatge. Caldrà crear el missatge que s'envia al servidor,
     * amb el següent format:
     * {"command": "add","userName": "Nom_de_l'usuari_connectat","text": "Contingut_del_missatge_a_enviat"}
     */
    public void enviaMissatge() {

        JSONObject msg = new JSONObject();
        msg.put("command", "add");
        msg.put("user", userName);
        msg.put("text", TextFieldMissatge.getText());

        sendServer(msg.toString());

        // Buidem el contingut del missatge
        TextFieldMissatge.setText("");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMsg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMsg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMsg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMsg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClientMsg newClientMsg;
                newClientMsg = new ClientMsg(args);
                newClientMsg.setVisible(true);

                // Obtenim periòdicament la llista d'usuaris
                javax.swing.Timer tUsr = new javax.swing.Timer(500, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        newClientMsg.ActualitzaLlistaUsuaris();
                    }
                });
                tUsr.start();


                // Timer per refrescar la pantalla amb els missatges
                javax.swing.Timer tMsg = new javax.swing.Timer(100, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        newClientMsg.ActualitzaMissatges();
                    }
                });
                tMsg.start();
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton BTEnviar;
    private javax.swing.JList<String> LlistaUsuaris;

    // Gestió de l'àrea de missatges
    private javax.swing.JEditorPane TextAreaMissatges;
    private javax.swing.text.html.HTMLEditorKit kitHtmlWriter;
    private HTMLDocument doc;

    private javax.swing.JTextField TextFieldMissatge;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration

}
